{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","_ref","id","name","email","react_default","a","createElement","className","src","concat","alt","CardList","robots","map","item","index","components_Card","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","height","borderColor","borderWidth","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchEvent","event","setState","searchField","target","value","state","_this$state","filteredRobots","filter","robot","toLowerCase","includes","length","components_SearchBox","components_Scroll","components_CardList","_this2","fetch","then","response","json","users","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iNAeeA,EAZF,SAAAC,GAAuBA,EAArBC,GAAqB,IAAjBC,EAAiBF,EAAjBE,KAAMC,EAAWH,EAAXG,MACxB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uDACdH,EAAAC,EAAAC,cAAA,OAAKE,IAAG,wBAAAC,OAA0BN,GAASO,IAAKR,IAChDE,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,UAAKJ,GACLE,EAAAC,EAAAC,cAAA,SAAIH,MCKMQ,EAVE,SAAAX,GAAc,IAAZY,EAAYZ,EAAZY,OAClB,OACCR,EAAAC,EAAAC,cAAA,WAEEM,EAAOC,IAAI,SAACC,EAAMC,GAAP,OAAiBX,EAAAC,EAAAC,cAACU,EAAD,CAAMC,IAAKF,EAAOd,GAAIa,EAAKb,GAAIC,KAAMY,EAAKZ,KAAMC,MAAOW,EAAKX,YCK7Ee,EAVG,SAAAlB,GAAoB,IAAlBmB,EAAkBnB,EAAlBmB,aACnB,OACEf,EAAAC,EAAAC,cAAA,SACCC,UAAU,mCACVa,KAAK,SACLC,YAAY,eACZC,SAAUH,KCCCI,EARA,SAAAC,GACd,OACCpB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAakB,MAAO,CAACC,UAAW,SAAUC,OAAQ,QAASC,YAAa,UAAWC,YAAa,QAC7GL,EAAMM,WC4CKC,qBA1Cd,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAkCDI,cAAgB,SAACC,GAChBR,EAAKS,SAAS,CACbC,YAAaF,EAAMG,OAAOC,SAnC3BZ,EAAKa,MAAQ,CACZjC,OAAQ,GACR8B,YAAa,IAJFV,wEAQJ,IAAAc,EACsBX,KAAKU,MAA5BjC,EADCkC,EACDlC,OAAQ8B,EADPI,EACOJ,YAETK,EAAiBnC,EAAOoC,OAAQ,SAAAC,GACtC,OAAOA,EAAM/C,KAAKgD,cAAcC,SAAST,EAAYQ,iBAGrD,OAAyB,IAAlBtC,EAAOwC,OAEZhD,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAd,2BAEAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACdH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAd,gBACAH,EAAAC,EAAAC,cAAC+C,EAAD,CAAWlC,aAAgBgB,KAAKI,gBAChCnC,EAAAC,EAAAC,cAACgD,EAAD,KACClD,EAAAC,EAAAC,cAACiD,EAAD,CAAU3C,OAAQmC,kDAMH,IAAAS,EAAArB,KACnBsB,MAAM,8CACLC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAK,OAAIL,EAAKf,SAAS,CAAC7B,OAAQiD,aAjCtBC,0BCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRNC,IAASC,OACRjE,EAAAC,EAAAC,cAACgE,EAAD,MACEC,SAASC,eAAe,SD+GrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjB,KAAK,SAAAkB,GACjCA,EAAaC","file":"static/js/main.b51914cd.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Card = ({id, name, email}) => {\r\n\treturn (\r\n\t\t\t<div className=\"tc dib bg-light-green br3 pa3 ma2 shadow-5 grow bw2\">\r\n\t\t\t\t<img src={`https://robohash.org/${email}`} alt={name}/>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t\t<p>{email}</p>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n};\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst CardList = ({robots}) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{\r\n\t\t\t\trobots.map((item, index) => <Card key={index} id={item.id} name={item.name} email={item.email}/>)\r\n\t\t\t}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n\treturn (\r\n\t\t\t<input \r\n\t\t\t\tclassName=\"b--green bg-lightest-blue ba pa3\" \r\n\t\t\t\ttype=\"search\" \r\n\t\t\t\tplaceholder=\"Robot Search\"\r\n\t\t\t\tonChange={searchChange}/>\r\n\t\t)\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = props => {\r\n\treturn (\r\n\t\t<div className=\"bt ma2 pa2\" style={{overflowY: 'scroll', height: '432px', borderColor: '#0ccac4', borderWidth: '2px', }}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css'\r\n\r\nclass App extends Component {\r\n\tconstructor(){\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\trobots: [],\r\n\t\t\tsearchField: ''\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst {robots, searchField} = this.state;\r\n\r\n\t\tconst filteredRobots = robots.filter( robot => {\r\n\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n\t\t});\r\n\r\n\t\treturn robots.length === 0 ?\r\n\t\t\t(\r\n\t\t\t\t<h1 className=\"tc\">Loading RobotFriends...</h1>\r\n\t\t\t) : (\r\n\t\t\t\t<div className=\"tc\">\r\n\t\t\t\t\t<h1 className=\"f1\">RobotFriends</h1>\r\n\t\t\t\t\t<SearchBox searchChange = {this.onSearchEvent} />\r\n\t\t\t\t\t<Scroll>\r\n\t\t\t\t\t\t<CardList robots={filteredRobots}/>\r\n\t\t\t\t\t</Scroll>\r\n\t\t\t\t</div>\r\n\t\t\t)\r\n\t\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tfetch(\"https://jsonplaceholder.typicode.com/users\")\r\n\t\t.then(response => response.json())\r\n\t\t.then(users => this.setState({robots: users})); \r\n\t}\r\n\r\n\tonSearchEvent = (event) => {\r\n\t\tthis.setState({\r\n\t\t\tsearchField: event.target.value\r\n\t\t})\r\n\t} \r\n}\r\n\r\nexport default App;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App'\nimport './index.css';\nimport 'tachyons';\n// import App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<App />\n\t, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}